{"version":3,"sources":["ng://angular-token/lib/angular-token.token.ts","ng://angular-token/lib/angular-token.service.ts","ng://angular-token/lib/angular-token.interceptor.ts","ng://angular-token/lib/angular-token.module.ts"],"names":["ANGULAR_TOKEN_OPTIONS","InjectionToken","AngularTokenService","http","config","platformId","activatedRoute","router","this","localStorage","global","window","isPlatformServer","open","location","href","origin","setItem","getItem","removeItem","defaultOptions","apiPath","apiBase","signInPath","signInRedirect","signInStoredUrlStorageKey","signOutPath","validateTokenPath","signOutFailedValidate","registerAccountPath","deleteAccountPath","registerAccountCallback","updatePasswordPath","resetPasswordPath","resetPasswordCallback","userTypes","loginField","oAuthBase","oAuthPaths","github","oAuthCallbackPath","oAuthWindowType","oAuthWindowOptions","globalOptions","headers","mergedOptions","assign","options","console","warn","tryLoadAuthData","Object","defineProperty","prototype","userType","name","undefined","userData","authData","setGlobalOptions","userSignedIn","canActivate","route","state","url","navigate","registerAccount","registerData","getUserTypeByName","password_confirmation","passwordConfirmation","login","confirm_success_url","post","getServerPath","deleteAccount","delete","signIn","signInData","_this","body","_a","password","observ","observe","pipe","share","subscribe","res","signInOAuth","oAuthType","params","oAuthPath","getOAuthPath","callbackUrl","authUrl","getOAuthUrl","windowOptions","key","hasOwnProperty","popup","requestCredentialsViaPostMessage","Error","processOAuthCallback","getAuthDataFromParams","signOut","finalize","validateToken","get","error","status","updatePassword","updatePasswordData","args","passwordCurrent","current_password","resetPasswordToken","reset_password_token","put","resetPassword","resetPasswordData","redirect_url","getUserPath","path","getApiPath","constructedPath","windowType","encodeURIComponent","getAuthDataFromStorage","getAuthHeadersFromResponse","data","accessToken","client","expiry","tokenType","uid","setAuthData","getAuthDataFromPostMessage","checkAuthData","queryParams","authWindow","pollerObserv","interval","responseObserv","fromEvent","pluck","filter","oAuthWindowResponseFilter","pollerSubscription","bind","closed","unsubscribe","postMessage","message","find","Injectable","providedIn","HttpClient","Inject","decorators","type","PLATFORM_ID","ActivatedRoute","Optional","Router","AngularTokenInterceptor","tokenService","intercept","req","next","currentAuthData","match","access-token","token-type","clone","setHeaders","handle","tap","handleResponse","err","HttpResponse","HttpErrorResponse","AngularTokenModule","parentModule","forRoot","ngModule","providers","provide","HTTP_INTERCEPTORS","useClass","multi","angularTokenOptionsProvider","useValue","NgModule","SkipSelf"],"mappings":"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","sourcesContent":["import { InjectionToken } from '@angular/core';\n\nexport const ANGULAR_TOKEN_OPTIONS = new InjectionToken('ANGULAR_TOKEN_OPTIONS');\n","import { Injectable, Optional, Inject, PLATFORM_ID } from '@angular/core';\nimport { ActivatedRoute, Router, CanActivate } from '@angular/router';\nimport { HttpClient } from '@angular/common/http';\nimport { isPlatformServer } from '@angular/common';\n\nimport { Observable, fromEvent, interval } from 'rxjs';\nimport { pluck, filter, share, finalize } from 'rxjs/operators';\n\nimport { ANGULAR_TOKEN_OPTIONS } from './angular-token.token';\n\nimport {\n  SignInData,\n  RegisterData,\n  UpdatePasswordData,\n  ResetPasswordData,\n\n  UserType,\n  UserData,\n  AuthData,\n\n  AngularTokenOptions,\n  GlobalOptions\n} from './angular-token.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AngularTokenService implements CanActivate {\n\n  get currentUserType(): string {\n    if (this.userType != null) {\n      return this.userType.name;\n    } else {\n      return undefined;\n    }\n  }\n\n  get currentUserData(): UserData {\n    return this.userData;\n  }\n\n  get currentAuthData(): AuthData {\n    return this.authData;\n  }\n\n  get apiBase(): any {\n    return this.options.apiBase;\n  }\n\n  get globalOptions(): GlobalOptions {\n    return this.options.globalOptions;\n  }\n\n  private options: AngularTokenOptions;\n  private userType: UserType;\n  private authData: AuthData;\n  private userData: UserData;\n  private global: Window | any;\n\n  private localStorage: Storage | any = {};\n\n  constructor(\n    private http: HttpClient,\n    @Inject(ANGULAR_TOKEN_OPTIONS) config: any,\n    @Inject(PLATFORM_ID) private platformId: Object,\n    @Optional() private activatedRoute: ActivatedRoute,\n    @Optional() private router: Router\n  ) {\n    this.global = (typeof window !== 'undefined') ? window : {};\n\n    if (isPlatformServer(platformId)) {\n      this.global = {\n        open: () => null,\n        location: {\n          href: '/',\n          origin: '/'\n        }\n      };\n\n      this.localStorage.setItem = () => null;\n      this.localStorage.getItem = () => null;\n      this.localStorage.removeItem = () => null;\n    } else {\n      this.localStorage = localStorage;\n    }\n\n    const defaultOptions: AngularTokenOptions = {\n      apiPath:                    null,\n      apiBase:                    null,\n\n      signInPath:                 'auth/sign_in',\n      signInRedirect:             null,\n      signInStoredUrlStorageKey:  null,\n\n      signOutPath:                'auth/sign_out',\n      validateTokenPath:          'auth/validate_token',\n      signOutFailedValidate:      false,\n\n      registerAccountPath:        'auth',\n      deleteAccountPath:          'auth',\n      registerAccountCallback:    this.global.location.href,\n\n      updatePasswordPath:         'auth',\n\n      resetPasswordPath:          'auth/password',\n      resetPasswordCallback:      this.global.location.href,\n\n      userTypes:                  null,\n      loginField:                 'email',\n\n      oAuthBase:                  this.global.location.origin,\n      oAuthPaths: {\n        github:                   'auth/github'\n      },\n      oAuthCallbackPath:          'oauth_callback',\n      oAuthWindowType:            'newWindow',\n      oAuthWindowOptions:         null,\n\n      globalOptions: {\n        headers: {}\n      }\n    };\n\n    const mergedOptions = (<any>Object).assign(defaultOptions, config);\n    this.options = mergedOptions;\n\n    if (this.options.apiBase === null) {\n      console.warn(`[angular-token] You have not configured 'apiBase', which may result in security issues. ` +\n                   `Please refer to the documentation at https://github.com/neroniaky/angular-token/wiki`);\n    }\n\n    this.tryLoadAuthData();\n  }\n\n  setGlobalOptions(options: GlobalOptions): void {\n    this.options.globalOptions = options;\n  }\n\n  userSignedIn(): boolean {\n      return !!this.authData;\n  }\n\n  canActivate(route, state): boolean {\n    if (this.userSignedIn()) {\n      return true;\n    } else {\n      // Store current location in storage (usefull for redirection after signing in)\n      if (this.options.signInStoredUrlStorageKey) {\n        this.localStorage.setItem(\n          this.options.signInStoredUrlStorageKey,\n          state.url\n        );\n      }\n\n      // Redirect user to sign in if signInRedirect is set\n      if (this.router && this.options.signInRedirect) {\n        this.router.navigate([this.options.signInRedirect]);\n      }\n\n      return false;\n    }\n  }\n\n\n  /**\n   *\n   * Actions\n   *\n   */\n\n  // Register request\n  registerAccount(registerData: RegisterData): Observable<any> {\n\n    registerData = Object.assign({}, registerData);\n\n    if (registerData.userType == null) {\n      this.userType = null;\n    } else {\n      this.userType = this.getUserTypeByName(registerData.userType);\n      delete registerData.userType;\n    }\n\n    if (\n      registerData.password_confirmation == null &&\n      registerData.passwordConfirmation != null\n    ) {\n      registerData.password_confirmation = registerData.passwordConfirmation;\n      delete registerData.passwordConfirmation;\n    }\n\n    const login = registerData.login;\n    delete registerData.login;\n    registerData[this.options.loginField] = login;\n\n    registerData.confirm_success_url = this.options.registerAccountCallback;\n\n    return this.http.post(this.getServerPath() + this.options.registerAccountPath, registerData);\n  }\n\n  // Delete Account\n  deleteAccount(): Observable<any> {\n    return this.http.delete(this.getServerPath() + this.options.deleteAccountPath);\n  }\n\n  // Sign in request and set storage\n  signIn(signInData: SignInData): Observable<any> {\n    this.userType = (signInData.userType == null) ? null : this.getUserTypeByName(signInData.userType);\n\n    const body = {\n      [this.options.loginField]: signInData.login,\n      password: signInData.password\n    };\n\n    const observ = this.http.post(this.getServerPath() + this.options.signInPath, body, { observe: 'response' }).pipe(share());\n\n    observ.subscribe(res => this.userData = res.body['data']);\n\n    return observ;\n  }\n\n  signInOAuth(oAuthType: string,\n              params?: { [key:string]: string; }) {\n\n    const oAuthPath: string = this.getOAuthPath(oAuthType);\n    const callbackUrl = `${this.global.location.origin}/${this.options.oAuthCallbackPath}`;\n    const oAuthWindowType: string = this.options.oAuthWindowType;\n    const authUrl: string = this.getOAuthUrl(\n      oAuthPath,\n      callbackUrl,\n      oAuthWindowType,\n      params\n    );\n\n    if (oAuthWindowType === 'newWindow') {\n      const oAuthWindowOptions = this.options.oAuthWindowOptions;\n      let windowOptions = '';\n\n      if (oAuthWindowOptions) {\n        for (const key in oAuthWindowOptions) {\n          if (oAuthWindowOptions.hasOwnProperty(key)) {\n              windowOptions += `,${key}=${oAuthWindowOptions[key]}`;\n          }\n        }\n      }\n\n      const popup = window.open(\n          authUrl,\n          '_blank',\n          `closebuttoncaption=Cancel${windowOptions}`\n      );\n      return this.requestCredentialsViaPostMessage(popup);\n    } else if (oAuthWindowType === 'sameWindow') {\n      this.global.location.href = authUrl;\n    } else {\n      throw new Error(`Unsupported oAuthWindowType \"${oAuthWindowType}\"`);\n    }\n  }\n\n  processOAuthCallback(): void {\n    this.getAuthDataFromParams();\n  }\n\n  // Sign out request and delete storage\n  signOut(): Observable<any> {\n    const observ = this.http.delete<any>(this.getServerPath() + this.options.signOutPath)\n\t  // Only remove the localStorage and clear the data after the call\n          .pipe(\n            finalize(() => {\n                this.localStorage.removeItem('accessToken');\n                this.localStorage.removeItem('client');\n                this.localStorage.removeItem('expiry');\n                this.localStorage.removeItem('tokenType');\n                this.localStorage.removeItem('uid');\n\n                this.authData = null;\n                this.userType = null;\n                this.userData = null;\n              }\n            )\n          );\n\n    return observ;\n  }\n\n  // Validate token request\n  validateToken(): Observable<any> {\n    const observ = this.http.get(this.getServerPath() + this.options.validateTokenPath).pipe(share());\n\n    observ.subscribe(\n      (res) => this.userData = res['data'],\n      (error) => {\n        if (error.status === 401 && this.options.signOutFailedValidate) {\n          this.signOut();\n        }\n    });\n\n    return observ;\n  }\n\n  // Update password request\n  updatePassword(updatePasswordData: UpdatePasswordData): Observable<any> {\n\n    if (updatePasswordData.userType != null) {\n      this.userType = this.getUserTypeByName(updatePasswordData.userType);\n    }\n\n    let args: any;\n\n    if (updatePasswordData.passwordCurrent == null) {\n      args = {\n        password:               updatePasswordData.password,\n        password_confirmation:  updatePasswordData.passwordConfirmation\n      };\n    } else {\n      args = {\n        current_password:       updatePasswordData.passwordCurrent,\n        password:               updatePasswordData.password,\n        password_confirmation:  updatePasswordData.passwordConfirmation\n      };\n    }\n\n    if (updatePasswordData.resetPasswordToken) {\n      args.reset_password_token = updatePasswordData.resetPasswordToken;\n    }\n\n    const body = args;\n    return this.http.put(this.getServerPath() + this.options.updatePasswordPath, body);\n  }\n\n  // Reset password request\n  resetPassword(resetPasswordData: ResetPasswordData): Observable<any> {\n\n    this.userType = (resetPasswordData.userType == null) ? null : this.getUserTypeByName(resetPasswordData.userType);\n\n    const body = {\n      [this.options.loginField]: resetPasswordData.login,\n      redirect_url: this.options.resetPasswordCallback\n    };\n\n    return this.http.post(this.getServerPath() + this.options.resetPasswordPath, body);\n  }\n\n\n  /**\n   *\n   * Construct Paths / Urls\n   *\n   */\n\n  private getUserPath(): string {\n    return (this.userType == null) ? '' : this.userType.path + '/';\n  }\n\n  private getApiPath(): string {\n    let constructedPath = '';\n\n    if (this.options.apiBase != null) {\n      constructedPath += this.options.apiBase + '/';\n    }\n\n    if (this.options.apiPath != null) {\n      constructedPath += this.options.apiPath + '/';\n    }\n\n    return constructedPath;\n  }\n\n  private getServerPath(): string {\n    return this.getApiPath() + this.getUserPath();\n  }\n\n  private getOAuthPath(oAuthType: string): string {\n    let oAuthPath: string;\n\n    oAuthPath = this.options.oAuthPaths[oAuthType];\n\n    if (oAuthPath == null) {\n      oAuthPath = `/auth/${oAuthType}`;\n    }\n\n    return oAuthPath;\n  }\n\n  private getOAuthUrl(oAuthPath: string,\n                      callbackUrl: string,\n                      windowType: string,\n                      params?: { [key:string]: string; }): string {\n    let url: string;\n\n    url =   `${this.options.oAuthBase}/${oAuthPath}`;\n    url +=  `?omniauth_window_type=${windowType}`;\n    url +=  `&auth_origin_url=${encodeURIComponent(callbackUrl)}`;\n\n    if (this.userType != null) {\n      url += `&resource_class=${this.userType.name}`;\n    }\n\n    if (params) {\n      for (let key in params) {\n        url += `&${key}=${encodeURIComponent(params[key])}`;\n      }\n    }\n\n    return url;\n  }\n\n\n  /**\n   *\n   * Get Auth Data\n   *\n   */\n\n  // Try to load auth data\n  private tryLoadAuthData(): void {\n\n    const userType = this.getUserTypeByName(this.localStorage.getItem('userType'));\n\n    if (userType) {\n      this.userType = userType;\n    }\n\n    this.getAuthDataFromStorage();\n\n    if (this.activatedRoute) {\n      this.getAuthDataFromParams();\n    }\n\n    // if (this.authData) {\n    //     this.validateToken();\n    // }\n  }\n\n  // Parse Auth data from response\n  public getAuthHeadersFromResponse(data: any): void {\n    const headers = data.headers;\n\n    const authData: AuthData = {\n      accessToken:    headers.get('access-token'),\n      client:         headers.get('client'),\n      expiry:         headers.get('expiry'),\n      tokenType:      headers.get('token-type'),\n      uid:            headers.get('uid')\n    };\n\n    this.setAuthData(authData);\n  }\n\n  // Parse Auth data from post message\n  private getAuthDataFromPostMessage(data: any): void {\n    const authData: AuthData = {\n      accessToken:    data['auth_token'],\n      client:         data['client_id'],\n      expiry:         data['expiry'],\n      tokenType:      'Bearer',\n      uid:            data['uid']\n    };\n\n    this.setAuthData(authData);\n  }\n\n  // Try to get auth data from storage.\n  public getAuthDataFromStorage(): void {\n\n    const authData: AuthData = {\n      accessToken:    this.localStorage.getItem('accessToken'),\n      client:         this.localStorage.getItem('client'),\n      expiry:         this.localStorage.getItem('expiry'),\n      tokenType:      this.localStorage.getItem('tokenType'),\n      uid:            this.localStorage.getItem('uid')\n    };\n\n    if (this.checkAuthData(authData)) {\n      this.authData = authData;\n    }\n  }\n\n  // Try to get auth data from url parameters.\n  private getAuthDataFromParams(): void {\n    this.activatedRoute.queryParams.subscribe(queryParams => {\n      const authData: AuthData = {\n        accessToken:    queryParams['token'] || queryParams['auth_token'],\n        client:         queryParams['client_id'],\n        expiry:         queryParams['expiry'],\n        tokenType:      'Bearer',\n        uid:            queryParams['uid']\n      };\n\n      if (this.checkAuthData(authData)) {\n        this.authData = authData;\n      }\n    });\n  }\n\n  /**\n   *\n   * Set Auth Data\n   *\n   */\n\n  // Write auth data to storage\n  private setAuthData(authData: AuthData): void {\n    if (this.checkAuthData(authData)) {\n\n      this.authData = authData;\n\n      this.localStorage.setItem('accessToken', authData.accessToken);\n      this.localStorage.setItem('client', authData.client);\n      this.localStorage.setItem('expiry', authData.expiry);\n      this.localStorage.setItem('tokenType', authData.tokenType);\n      this.localStorage.setItem('uid', authData.uid);\n\n      if (this.userType != null) {\n        this.localStorage.setItem('userType', this.userType.name);\n      }\n\n    }\n  }\n\n\n  /**\n   *\n   * Validate Auth Data\n   *\n   */\n\n  // Check if auth data complete and if response token is newer\n  private checkAuthData(authData: AuthData): boolean {\n\n    if (\n      authData.accessToken != null &&\n      authData.client != null &&\n      authData.expiry != null &&\n      authData.tokenType != null &&\n      authData.uid != null\n    ) {\n      if (this.authData != null) {\n        return authData.expiry >= this.authData.expiry;\n      } else {\n        return true;\n      }\n    } else {\n      return false;\n    }\n  }\n\n\n  /**\n   *\n   * OAuth\n   *\n   */\n\n  private requestCredentialsViaPostMessage(authWindow: any): Observable<any> {\n    const pollerObserv = interval(500);\n\n    const responseObserv = fromEvent(this.global, 'message').pipe(\n      pluck('data'),\n      filter(this.oAuthWindowResponseFilter)\n    );\n\n    const responseSubscription = responseObserv.subscribe(\n      this.getAuthDataFromPostMessage.bind(this)\n    );\n\n    const pollerSubscription = pollerObserv.subscribe(() => {\n      if (authWindow.closed) {\n        pollerSubscription.unsubscribe();\n      } else {\n        authWindow.postMessage('requestCredentials', '*');\n      }\n    });\n\n    return responseObserv;\n  }\n\n  private oAuthWindowResponseFilter(data: any): any {\n    if (data.message === 'deliverCredentials'\n      || data.message === 'authFailure'\n      || data.message === 'deliverProviderAuth') {\n      return data;\n    }\n  }\n\n\n  /**\n   *\n   * Utilities\n   *\n   */\n\n  // Match user config by user config name\n  private getUserTypeByName(name: string): UserType {\n    if (name == null || this.options.userTypes == null) {\n      return null;\n    }\n\n    return this.options.userTypes.find(\n      userType => userType.name === name\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpEvent, HttpRequest, HttpInterceptor, HttpHandler, HttpResponse, HttpErrorResponse } from '@angular/common/http';\n\nimport { AngularTokenOptions } from './angular-token.model';\nimport { AngularTokenService } from './angular-token.service';\n\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\n@Injectable()\nexport class AngularTokenInterceptor implements HttpInterceptor {\n  private atOptions: AngularTokenOptions;\n\n  constructor( private tokenService: AngularTokenService ) {\n  }\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n\n    // Get auth data from local storage\n    this.tokenService.getAuthDataFromStorage();\n\n    // Add the headers if the request is going to the configured server\n    if (this.tokenService.currentAuthData && (this.tokenService.apiBase === null || req.url.match(this.tokenService.apiBase))) {\n\n      const headers = {\n        'access-token': this.tokenService.currentAuthData.accessToken,\n        'client':       this.tokenService.currentAuthData.client,\n        'expiry':       this.tokenService.currentAuthData.expiry,\n        'token-type':   this.tokenService.currentAuthData.tokenType,\n        'uid':          this.tokenService.currentAuthData.uid\n      };\n\n      // Custom headers passed in for each request\n      const globalOptions = this.tokenService.globalOptions;\n      if (globalOptions && globalOptions.headers) {\n        for (let key in globalOptions.headers) {\n          headers[key] = globalOptions.headers[key];\n        }\n      }\n\n      req = req.clone({\n        setHeaders: headers\n      });\n    }\n\n    return next.handle(req).pipe(tap(\n        res => this.handleResponse(res),\n        err => this.handleResponse(err)\n    ));\n  }\n\n\n  // Parse Auth data from response\n  private handleResponse(res: any): void {\n    if (res instanceof HttpResponse || res instanceof HttpErrorResponse) {\n      if (this.tokenService.apiBase === null || (res.url && res.url.match(this.tokenService.apiBase))) {\n        this.tokenService.getAuthHeadersFromResponse(<any>res);\n      }\n    }\n  }\n}\n","import { NgModule, ModuleWithProviders, Optional, SkipSelf, Provider } from '@angular/core';\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\n\nimport { AngularTokenOptions } from './angular-token.model';\nimport { AngularTokenService } from './angular-token.service';\nimport { AngularTokenInterceptor } from './angular-token.interceptor';\nimport { ANGULAR_TOKEN_OPTIONS } from './angular-token.token';\n\nexport * from './angular-token.service';\n\n@NgModule()\nexport class AngularTokenModule {\n\n  constructor(@Optional() @SkipSelf() parentModule: AngularTokenModule) {\n    if (parentModule) {\n      throw new Error('AngularToken is already loaded. It should only be imported in your application\\'s main module.');\n    }\n  }\n  static forRoot(options: AngularTokenOptions): ModuleWithProviders {\n    return {\n      ngModule: AngularTokenModule,\n      providers: [\n        {\n          provide: HTTP_INTERCEPTORS,\n          useClass: AngularTokenInterceptor,\n          multi: true\n        },\n        options.angularTokenOptionsProvider ||\n        {\n          provide: ANGULAR_TOKEN_OPTIONS,\n          useValue: options\n        },\n        AngularTokenService\n      ]\n    };\n  }\n}\n"]}